@{
    Layout = "_AdminLayout";
    ViewBag.Title = "Page Content";
}

@section styles{

    <link href="/assets/plugins/select2/css/select2.min.css" rel="stylesheet" type="text/css" />
    <link href="~/assets/plugins/summernote-master/summernote.css" rel="stylesheet" />
    <style>
        .bs-example-modal-lg .modal-dialog .modal-dialog {
            border: 1px solid #9c9797;
            box-shadow: #bfb3b3 3px 3px 20px 8px;
        }

        .modal-header {
            background-color: #dadada;
        }

        .tab-content{border-bottom:1px solid lightgray; border-left:1px solid lightgray; border-right:1px solid lightgray; }
        .nav-tabs.nav-justified>.active>a, .nav-tabs.nav-justified>.active>a:focus, .nav-tabs.nav-justified>.active>a:hover{
            background-color:#d1dbe4;
        }
    </style>
}




@section breadcrumb{
    <ol class="breadcrumb">
        <li><a href="/">Home</a></li>
        <li><a href="/dashboard">Dashboard</a></li>
        <li class="active">Page Content</li>
    </ol>
}


<div class="row">
    <div class="col-sm-12">
        <div class="panel panel-white">
            <div class="panel panel-heading">
                <h2 class="panel-title">
                    <span>Page Content</span>
                </h2>
            </div>
            <div class="panel-body">
                <div class="row">
                    <div class="col-sm-12">
                        <div role="tabpanel">
                            <!-- Nav tabs -->
                            <ul class="nav nav-tabs nav-justified" role="tablist">
                                <li role="presentation" class="active">
                                    <a href="#tab_basic" role="tab" data-toggle="tab" aria-expanded="true">
                                        <span class="badge badge-info">1</span>&nbsp;<span id="tab-1-txt">Add New</span>
                                    </a>
                                </li>
                                <li role="presentation" class="">
                                    <a href="#tab_price" role="tab" data-toggle="tab" aria-expanded="false">
                                        <span class="badge badge-info">2</span>&nbsp;<span>Page List</span>
                                    </a>
                                </li>
                            </ul>
                            <!-- Tab panes -->
                            <div class="tab-content">
                                <div role="tabpanel" class="tab-pane fade active in" id="tab_basic">
                                    <form id="new-form" data-bind="submit:Save_PageContent">
                                        <div class="row">
                                            <div class="col-sm-9">
                                                <div class="form-group">
                                                    <label class="control-label">Page Name:</label>
                                                    <input type="text" class="form-control" placeholder="Enter Page Name" required
                                                           data-bind="value:PageContent.Name, valueUpdate:'afterkeydown'" />
                                                </div>
                                            </div>
                                            <div class="col-sm-3">
                                                <div class="form-group">
                                                    <label class="control-label">Show menu:</label>
                                                    <div class="input-group">
                                                        <div class="input-group-addon">
                                                            <input type="checkbox" value="true" data-bind="checked:PageContent.ShowMenu" />
                                                        </div>
                                                        <div class="form-control" style="padding: 9px!important;">
                                                            <span data-bind="text:PageContent.ShowMenu()?'YES':'NO'"></span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-12">                                                
                                                <div class="form-group">
                                                    <label class="control-label">Page Title:</label>
                                                    <input type="text" class="form-control" placeholder="Enter Page Title" required
                                                           data-bind="value:PageContent.Title, valueUpdate:'afterkeydown'" />
                                                </div>
                                                <div class="form-group">
                                                    <label class="control-label">Page Url: </label>
                                                    <span class="form-control" style="padding: 7px 10px!important;" data-bind="text:PageContent.URL"></span>
                                                </div>
                                                <div class="form-group">
                                                    <label class="control-label">Meta Keywords:</label>
                                                    <input type="text" class="form-control" placeholder="Enter Meta Keywords"
                                                           data-bind="value:PageContent.MetaKeywords, valueUpdate:'afterkeydown'" />
                                                </div>
                                                <div class="form-group">
                                                    <label class="control-label">Meta Description:</label>
                                                    <input type="text" class="form-control" placeholder="Enter Meta Description"
                                                           data-bind="value:PageContent.MetaDescription, valueUpdate:'afterkeydown'" />
                                                </div>
                                            </div>
                                            <div class="col-sm-12">
                                                <div class="form-group">
                                                    <label class="control-label">Header Content:</label>
                                                    <div id="summernote-header"></div>
                                                </div>
                                            </div>
                                            <div class="col-sm-12">
                                                <div class="form-group">
                                                    <label class="control-label">Body Content:</label>
                                                    <div id="summernote-body"></div>
                                                </div>
                                            </div>
                                            <div class="col-sm-12">
                                                <div class="form-group">
                                                    <button type="submit" class="btn btn-success" form="new-form" data-bind="disable:IsSaving">
                                                        <span>Save</span>
                                                        <span class="fa fa-spinner fa-spin" data-bind="visible:IsSaving"></span>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                                <div role="tabpanel" class="tab-pane fade" id="tab_price">
                                    <div class="table-responsive">
                                        <table class="table table-bordered table-hover">
                                            <thead>
                                                <tr>
                                                    <th style="width:100px;">#</th>
                                                    <th>Name</th>
                                                    <th>Title</th>
                                                    <th>Active</th>
                                                    <th>Show Menu</th>
                                                    <th>Added On</th>
                                                    <th>Action</th>
                                                </tr>
                                            </thead>
                                            <tbody data-bind="foreach:PageList">
                                                <tr>
                                                    <td style="width:100px;" data-bind="text: $index()+1"></td>
                                                    <td>
                                                        <a href="#" target="_blank" data-bind="attr:{href:'/pages/'+$data.URL()}">
                                                            <span data-bind="text: $data.Name"></span>
                                                        </a>
                                                    </td>
                                                    <td data-bind="text: $data.Title"></td>
                                                    <td>
                                                        <label>
                                                            <input type="checkbox" value="true" data-bind="checked: $data.Active, visible:$data.CanDelete" />
                                                            <span data-bind="text: $data.Active()?'Yes':'No'"></span>
                                                        </label>
                                                    </td>
                                                    <td>
                                                        <span data-bind="text: $data.ShowMenu()?'Yes':'No'"></span>
                                                    </td>
                                                    <td>
                                                        <span data-bind="visible:$data.AddedOn!=null">
                                                            <span data-bind="text: moment($data.AddedOn).format('Do MMM YYYY')"></span>
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <div>
                                                            <button type="button" class="btn btn-primary btn-rounded btn-xs"
                                                                    data-bind="click:$parent.OnClickEditBtn">
                                                                <i class="fa fa-edit"></i>
                                                                <span>Edit</span>
                                                            </button>
                                                            <button type="button" class="btn btn-danger btn-rounded btn-xs"
                                                                    data-bind="click:$parent.Delete_PageContent, visible:$data.CanDelete">
                                                                <i class="fa fa-trash"></i>
                                                                <span>Delete</span>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            </tbody>
                                            <tbody data-bind="visible:IsLoading">
                                                <tr>
                                                    <td colspan="7">
                                                        <span class="glyphicon glyphicon-refresh processingIcon"></span>
                                                        <span>Loading.....</span>
                                                    </td>
                                                </tr>
                                            </tbody>
                                            <tfoot>
                                                <tr>
                                                    <td style="width:100px;">
                                                        <select data-bind="options:[10,20,50,100], value:Rows, optionsCaption:'Rows'"
                                                                class="form-control"></select>
                                                    </td>
                                                    <td colspan="2">
                                                        <span>
                                                            <span>Total:</span>
                                                            <span data-bind="text:Total"></span>
                                                            <span>Records</span>
                                                        </span>
                                                    </td>
                                                    <td colspan="4">
                                                        <div id="page-selection"></div>
                                                    </td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>            
        </div>
    </div>
</div>



@section scripts{
<script>
        (function (h, q) {
            h.fn.bootpag = function (p) {
                function m(c, b) {
                    b = parseInt(b, 10); var d, e = 0 == a.maxVisible ? 1 : a.maxVisible, k = 1 == a.maxVisible ? 0 : 1, n = Math.floor((b - 1) / e) * e, f = c.find("li"); a.page = b = 0 > b ? 0 : b > a.total ? a.total : b; f.removeClass(a.activeClass); d = 1 > b - 1 ? 1 : a.leaps && b - 1 >= a.maxVisible ? Math.floor((b - 1) / e) * e : b - 1; a.firstLastUse && f.first().toggleClass(a.disabledClass, 1 === b); e = f.first(); a.firstLastUse && (e = e.next()); e.toggleClass(a.disabledClass, 1 === b).attr("data-lp", d).find("a").attr("href", g(d)); k = 1 == a.maxVisible ?
            0 : 1; d = b + 1 > a.total ? a.total : a.leaps && b + 1 < a.total - a.maxVisible ? n + a.maxVisible + k : b + 1; e = f.last(); a.firstLastUse && (e = e.prev()); e.toggleClass(a.disabledClass, b === a.total).attr("data-lp", d).find("a").attr("href", g(d)); f.last().toggleClass(a.disabledClass, b === a.total); e = f.filter("[data-lp=" + b + "]"); k = "." + [a.nextClass, a.prevClass, a.firstClass, a.lastClass].join(",."); if (!e.not(k).length) {
                var m = b <= n ? -a.maxVisible : 0; f.not(k).each(function (b) {
                    d = b + 1 + n + m; h(this).attr("data-lp", d).toggle(d <= a.total).find("a").html(d).attr("href",
                    g(d))
                }); e = f.filter("[data-lp=" + b + "]")
            } e.not(k).addClass(a.activeClass); l.data("settings", a)
                } function g(c) { return a.href.replace(a.hrefVariable, c) } var l = this, a = h.extend({
                    total: 0, page: 1, maxVisible: null, leaps: !0, href: "javascript:void(0);", hrefVariable: "{{number}}", next: "&raquo;", prev: "&laquo;", firstLastUse: !1, first: '<span aria-hidden="true">&larr;</span>', last: '<span aria-hidden="true">&rarr;</span>', wrapClass: "pagination", activeClass: "active", disabledClass: "disabled", nextClass: "next", prevClass: "prev",
                    lastClass: "last", firstClass: "first"
                }, l.data("settings") || {}, p || {}); if (0 >= a.total) return this; h.isNumeric(a.maxVisible) || a.maxVisible || (a.maxVisible = parseInt(a.total, 10)); l.data("settings", a); return this.each(function () {
                    var c, b, d = h(this); c = ['<ul class="', a.wrapClass, ' bootpag">']; a.firstLastUse && (c = c.concat(['<li data-lp="1" class="', a.firstClass, '"><a href="', g(1), '">', a.first, "</a></li>"])); a.prev && (c = c.concat(['<li data-lp="1" class="', a.prevClass, '"><a href="', g(1), '">', a.prev, "</a></li>"])); for (b =
                    1; b <= Math.min(a.total, a.maxVisible) ; b++) c = c.concat(['<li data-lp="', b, '"><a href="', g(b), '">', b, "</a></li>"]); a.next && (b = a.leaps && a.total > a.maxVisible ? Math.min(a.maxVisible + 1, a.total) : 2, c = c.concat(['<li data-lp="', b, '" class="', a.nextClass, '"><a href="', g(b), '">', a.next, "</a></li>"])); a.firstLastUse && (c = c.concat(['<li data-lp="', a.total, '" class="last"><a href="', g(a.total), '">', a.last, "</a></li>"])); c.push("</ul>"); d.find("ul.bootpag").remove(); d.append(c.join("")); c = d.find("ul.bootpag"); d.find("li").click(function () {
                        var b =
                        h(this); if (!b.hasClass(a.disabledClass) && !b.hasClass(a.activeClass)) { var c = parseInt(b.attr("data-lp"), 10); l.find("ul.bootpag").each(function () { m(h(this), c) }); l.trigger("page", c) }
                    }); m(c, a.page)
                })
            }
        })(jQuery, window);
</script>

<script src="~/assets/plugins/summernote-master/summernote.js"></script>
<script src="~/assets/plugins/summernote-master/summernote-ext-video.js"></script>
<script src="~/assets/plugins/summernote-master/summernote-ext-fontstyle.js"></script>


<script src="~/assets/plugins/select2/js/select2.min.js"></script>
<script src="~/lib/moment/moment.js"></script>
<script src="~/lib/knockout/dist/knockout.js"></script>

    <script type="text/javascript">

        function AppViewModel() {
            var self = this;
            self.IsEditing = ko.observable(false);
            self.IsLoading = ko.observable(false);
            self.IsSaving = ko.observable(false);
            self.IsDeleting = ko.observable(false);

            self.Offset = ko.observable(0);
            self.Rows = ko.observable(10).extend({ rateLimit: 500 });
            self.Total = ko.observable(0);
            self.SearchText = ko.observable('').extend({ rateLimit: 500 });
            self.PageList = ko.observableArray([]);

            self.PageContent = {
                Id: ko.observable(0),
                Name: ko.observable(''),
                URL: ko.observable(''),
                Title: ko.observable(''),
                Active: ko.observable(true),
                ShowMenu: ko.observable(true),
                MetaKeywords: ko.observable(''),
                MetaDescription: ko.observable(''),
                HeaderContent: ko.observable(''),
                BodyContent: ko.observable('')
            };

            self.PageContent.Name.subscribe(function (newValue) {
                newValue = newValue || '';
                newValue = '/pages/'+ GetWithoutSpecialChar(newValue);
                self.PageContent.URL(newValue.toLowerCase());
            });

            self.Rows.subscribe(function (newValue) {
                self.PageList.removeAll();
                self.Get_PageList();
            });

            self.SearchText.subscribe(function (newValue) {
                newValue = newValue || '';
                if (newValue.length == 0) {
                    self.PageList.removeAll();
                    self.Get_PageList();
                }
                self.GetSearchResult();
            });

            self.Get_PageList = function (offset, index) {
                self.IsLoading(true);
                offset = offset || 0;
                index = index || 1;
                $.get('/master/getpaginated-page-content/' + offset + '/' + self.Rows(), function (obj) {
                    var totalPage = (obj.TotalCount > self.Rows()) ? obj.TotalCount / self.Rows() : 1;
                    var reminder = (obj.TotalCount > self.Rows()) ? obj.TotalCount % self.Rows() : 0;
                    if (reminder > 0) { totalPage += 1; }
                    $.each(obj.PagedSet, function (i, o) { self.PageList.push(new PageViewModel(o)); });
                    $('#page-selection').bootpag({ total: parseInt(totalPage), page: index, maxVisible: 10 });
                    self.Total(obj.TotalCount);
                    self.IsLoading(false);
                    console.log(obj);
                });
            };

            self.GetSearchResult = function (Offset, index) {
                Offset = Offset || 0;
                index = index || 1;
                self.IsLoading(true);
                $.ajax({
                    type: 'POST', dataType: "json",
                    url: '/master/search-page-content',
                    contentType: "application/json; charset=utf-8",
                    data: ko.toJSON({ offset: Offset, rows: self.Rows(), searchTxt: self.SearchText() }),
                    success: function (obj) {
                        self.PageList.removeAll();
                        var totalPage = (obj.TotalCount > self.Rows()) ? obj.TotalCount / self.Rows() : 1;
                        var reminder = (obj.TotalCount > self.Rows()) ? obj.TotalCount % self.Rows() : 0;
                        if (reminder > 0) { totalPage += 1; }
                        $.each(obj.PagedSet, function (i, o) { self.PageList.push(new PageViewModel(o)); });
                        $('#page-selection').bootpag({ total: parseInt(totalPage), page: index, maxVisible: 10 });
                        self.Total(obj.TotalCount);
                        self.IsLoading(false);
                    },
                    error: function (result) { console.log(result); toastr.warning('Error'); }
                });
            };

            self.Save_PageContent = function () {
                var name = self.PageContent.Name() || '';
                if (name.length == 0) { return; }
                var title = self.PageContent.Title() || '';
                if (title.length == 0) { return; }

                var headerContent = $('#summernote-header').code();
                self.PageContent.HeaderContent(headerContent);
                var bodyContent = $('#summernote-body').code();
                self.PageContent.BodyContent(bodyContent);

                self.IsSaving(true);
                var api = self.IsEditing() ? '/master/update-page-content' : '/master/add-new-page-content';
                $.ajax({
                    type: 'POST', dataType: "json", url: api,
                    contentType: "application/json; charset=utf-8",
                    data: ko.toJSON(self.PageContent),
                    success: function (data) {
                        self.IsSaving(false); console.log(data);
                        toastr.success('Success'); self.IsEditing(false);
                        self.PageList.removeAll(); self.ClearAllFields();
                        self.Get_PageList(self.Offset(0), self.Rows());
                    },
                    error: function (result) { console.log(result); toastr.warning('Error'); }
                });

            };

            self.Delete_PageContent = function (obj) {
                console.log(ko.toJSON(obj));
                obj.IsDeleting(true);
                $.ajax({
                    type: 'GET', dataType: "json",
                    url: '/master/delete-page-content/' + obj.Id,
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        obj.IsDeleting(false);
                        self.PageList.removeAll();
                        self.Get_PageList(self.Offset(), self.Rows());
                        console.log(data);
                        toastr.success('Success');
                    },
                    error: function (result) { console.log(result); toastr.warning('Error'); }
                });

            };

            self.OnClickEditBtn = function (obj) {
                self.IsEditing(true);
                self.PageContent.Id(obj.Id);
                self.PageContent.URL(obj.URL());
                self.PageContent.Name(obj.Name());
                self.PageContent.Title(obj.Title());
                self.PageContent.Active(obj.Active());
                self.PageContent.ShowMenu(obj.ShowMenu());

                self.PageContent.BodyContent(obj.BodyContent());
                self.PageContent.MetaKeywords(obj.MetaKeywords());
                self.PageContent.HeaderContent(obj.HeaderContent());
                self.PageContent.MetaDescription(obj.MetaDescription());
                
                var headerContent = obj.HeaderContent() || '';
                var bodyContent = obj.BodyContent() || '';
                $('#summernote-header').code(headerContent);
                $('#summernote-body').code(bodyContent);
                $('#tab-1-txt').text("Update");
                $('a[href="#tab_basic"]').click();
                console.log(ko.toJSON(self.PageContent));
            };

            self.ClearAllFields = function () {
                self.PageContent.Active(true);
                self.PageContent.ShowMenu(true);
                self.PageContent.Id(0);
                self.PageContent.MetaDescription('');
                self.PageContent.MetaKeywords('');
                self.PageContent.Name('');
                self.PageContent.URL('');                
                self.PageContent.Title('');
                self.PageContent.HeaderContent('');
                self.PageContent.BodyContent('');
                $('#summernote-header, #summernote-body').code('');
                $('#tab-1-txt').text("Add New");
                $('a[href="#tab_price"]').click();
            };

            self.Init = function () {
                self.Get_PageList();
            };

        };

        function PageViewModel(obj) {
            var x = this;
            x.Id = obj.Id;
            x.AddedOn = obj.AddedOn;
            x.CanDelete = obj.CanDelete;
            x.IsDeleting = ko.observable(false);
            x.Name = ko.observable(obj.Name);
            x.URL = ko.observable(obj.URL);
            x.Title = ko.observable(obj.Title);
            x.Active = ko.observable(obj.Active);
            x.ShowMenu = ko.observable(obj.ShowMenu);
            x.BodyContent = ko.observable(obj.BodyContent);
            x.HeaderContent = ko.observable(obj.HeaderContent);
            x.MetaKeywords = ko.observable(obj.MetaKeywords);
            x.MetaDescription = ko.observable(obj.MetaDescription);
        };

        $(document).ready(function () {
            var app = new AppViewModel();
            ko.applyBindings(app);
            app.Rows(10);
            app.Init();
           
            $('select').select2();
            $('#page-selection').bootpag({ total: 10, page: 1, maxVisible: 10 });

            $('#page-selection').on('page', function (event, num) {
                console.log('bootpag', event, num);
                var offset = (app.Rows() * (num - 1));
                app.PageList.removeAll();
                if (app.SearchText().length > 0) {
                    app.GetSearchResult(offset, num);
                } else { app.Get_PageList(offset, num); }
            });

            $('#summernote-header').summernote({
                placeholder: 'Enter page content', height: 100,
                toolbar: [
                    ['style', ['style']],
                    ['font', ['bold', 'italic', 'underline', 'clear']],
                    ['fontname', ['fontname']],
                    ['fontsize', ['fontsize']],
                    ['color', ['color']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['height', ['height']],
                    ['table', ['table']],
                    ['insert', ['link', 'picture', 'video', 'hr']],
                    ['view', ['fullscreen', 'codeview']],
                    ['help', ['help']]
                ],
                popover: {
                    image: [
                      ['imagesize', ['imageSize100', 'imageSize50', 'imageSize25']],
                      ['float', ['floatLeft', 'floatRight', 'floatNone']],
                      ['remove', ['removeMedia']]
                    ]
                }, dialogsFade: true,
                onImageUpload: function (files, editor, welEditable) {
                    var _data = new FormData();
                    _data.append("file", files[0]);
                    $.ajax({
                        type: "POST", url: "/uploadfile", data: _data,
                        cache: false, contentType: false, processData: false,
                        success: function (url) { editor.insertImage(welEditable, url); }
                    });
                }
            });

            $('#summernote-body').summernote({
                placeholder: 'Enter page content', height: 100,
                toolbar: [
                    ['style', ['style']],
                    ['font', ['bold', 'italic', 'underline', 'clear']],
                    ['fontname', ['fontname']],
                    ['fontsize', ['fontsize']],
                    ['color', ['color']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['height', ['height']],
                    ['table', ['table']],
                    ['insert', ['link', 'picture', 'video', 'hr']],
                    ['view', ['fullscreen', 'codeview']],
                    ['help', ['help']]
                ],                
                popover: {
                    image: [
                      ['imagesize', ['imageSize100', 'imageSize50', 'imageSize25']],
                      ['float', ['floatLeft', 'floatRight', 'floatNone']],
                      ['remove', ['removeMedia']]
                    ]
                }, dialogsFade: true,
                onImageUpload: function (files, editor, welEditable) {
                    var _data = new FormData();
                    _data.append("file", files[0]);
                    $.ajax({
                        type: "POST", url: "/uploadfile", data: _data,
                        cache: false, contentType: false, processData: false,
                        success: function (url) { editor.insertImage(welEditable, url); }
                    });
                }
            });

        });
    </script>


}